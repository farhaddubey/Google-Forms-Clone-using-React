import CropOriginalIcon from '@mui/icons-material/CropOriginal';
import AutofpsSelectIcon from '@mui/icons-material/AutofpsSelect';
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import ShortTextIcon from '@mui/icons-material/ShortText';
import SubjectIcon from '@mui/icons-material/Subject';
import MoreVertIcon from '@mui/icons-material/MoreVert';
import DeleteIcon from '@mui/icons-material/Delete';
import FilterFramesIcon from '@mui/icons-material/FilterFrames';
import FilterNoneIcon from '@mui/icons-material/FilterNone';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import OndemandVideoIcon from '@mui/icons-material/OndemandVideo';
import TextFieldsIcon from '@mui/icons-material/TextFields';
import CloseIcon from '@mui/icons-material/Close';
import OutboundIcon from '@mui/icons-material/Outbound';
import { FormControlLabel, Icon, MenuItem, Select, Typography } from '@mui/material';
import Switch from '@mui/material/Switch';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import Radio from '@mui/material/Radio';
import IconButton from '@mui/material/IconButton';
import Button from '@mui/material/Button';
import FormControl from '@mui/material';
import React, {useState, useEffect} from 'react'
import './QuestionForm.css'
import { BsTrash } from 'react-icons/bs';
import { FiCornerRightUp } from 'react-icons/fi';
import { DragIndicator } from '@mui/icons-material';
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';
import { Crop, QuestionAnswer } from '@mui/icons-material';
import DragIndicatorIcon from '@mui/icons-material/DragIndicator';
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
const QuestionForm = () => {
  const [questions, setQuestions] = useState(
    [{questionText: 'Which is the capital city of Karnataka?',
      questionType: 'radio',
      options : [
        {optionText: 'Bengaluru'},
        {optionText: 'Belgavi'},
        {optionText: 'Hubli'},
        {optionText: 'Mandya'}
      ],
    answer:false,
    answerkey:'',
    points:0,
    open:true,
    required:false}]
  )
  function setOptionAnswer(ans, qno){
    var Questions=[...questions];
    Questions[qno].answerkey=ans;
    setQuestions(Questions);
    console.log(qno+" "+ans);
  }
  function setOptionPoints(points, qno){
    var Questions=[...questions];
    Questions[qno].points=points;
    setQuestions(Questions);
    console.log(points+" "+qno);
  }
  function doneAnswer(i){
    var answerOfQuestions=[...questions];
    answerOfQuestions[i].answer=!answerOfQuestions[i].answer;
    setQuestions(answerOfQuestions);
    
  }
  function addAnswer(i){
    var answerOfQuestions=[...questions];
    answerOfQuestions[i].answer=!answerOfQuestions[i].answer;
    setQuestions(answerOfQuestions);
  }
  function changeOptionValue(text, i, j){
    var optionsQuestion = [...questions];
    optionsQuestion[i].options[j].optionText=text;
    setQuestions(optionsQuestion);
  }

function changeQuestion(text, i){
  var newQuestion=[...questions];
  newQuestion[i].questionText=text;
  setQuestions(newQuestion);
  console.log(newQuestion)
}
function addQuestionType(i, type){
  let qs=[...questions];
  console.log(type);
  qs[i].questionType=type;
  setQuestions(qs);
}
function removeOption(i, j){
  var removeOptionQuestion=[...questions];
  if(removeOptionQuestion[i].options.length>1){
    removeOptionQuestion[i].options.splice(j,1);
    setQuestions(removeOptionQuestion);
    console.log(i+"__"+j);
  }
}
function addOption(i){
  var optionsOfQuestion=[...questions];
  if(optionsOfQuestion[i].options.length<5){
    optionsOfQuestion[i].options.push({optionText: "Option" +(optionsOfQuestion[i].options.length+1)})
  }else{
    console.log("Max 5 options");
  }
  setQuestions(optionsOfQuestion);
}
function copyQuestion(i){
  expandCloseAll()
  let qs=[...questions]
  var newQuestion={...qs[i]};
  setQuestions([...questions, newQuestion])
}
function deleteQuestion(i){
  let qs=[...questions];
  if(questions.length>1){
    qs.splice(i, 1);
  }
  setQuestions(qs)
}
function requiredQuestion(i){
  var reqQuestion=[...questions];
  reqQuestion[i].required=!reqQuestion[i].required
  console.log(reqQuestion[i].required+" "+i);
  setQuestions(reqQuestion)
}
function onDragEnd(result){
  if(!result.destination){
    return;
    }
    var itemgg=[...questions];
    const itemF=reorder(
      itemgg,
      result.source.index,
      result.destination.index,
      );
      setQuestions(itemF);
}
const reorder=(list, startIndex, endIndex) => {
  const result=Array.from(list);
  const [removed] =result.splice(startIndex, 1);
  result.splice(endIndex, 0, removed);
  return result;
}


function addMoreQuestionField(){
  expandCloseAll();
  setQuestions([...questions,
  {questionText:"Question", questionType:"radio", options:[{optionText:"Option 1"}], open:true, required:false}]);
}
function expandCloseAll(){
  let qs=[...questions];
  for(let j=0; j<qs.length; j++){
    qs[j].open=false;
  }
  setQuestions(qs);
}
function handleExpand(i){
  let qs=[...questions];
  for(let j=0; j<qs.length; j++){
    if(i===j){
      qs[i].open=true;
    }else{
      qs[j].open=false;
    }
  }
  setQuestions(qs);
}


function questionsUI(){    
    return questions.map((ques, i) =>(
      <Draggable key={i} draggableId={i+'id'} index={i}>
        {(provided, snapshot)=>(
          <div
            ref={provided.innerRef}
                {...provided.draggableProps}
                {...provided.dragHandleProps}>
                  <div>
                    <div style={{marginBottom:'0px'}}>
                      <div style={{width:'100%', marginBottom:'0px'}}>
                        <DragIndicatorIcon style={{transform: 'rotate(-90deg)', color:'#DAE0E2',
                        position:'relative', left:'300px'}} fontSize='small' />
                      </div>
                      <div>
<Accordion expanded={questions[i].open} onChange={()=>{handleExpand(i)}} className={questions[i].open ? 'add_border' : ""}>
  <AccordionSummary aria-controls="panelia-content" id="panelia-header" elevation={1} style={{width:'100%'}}>
    {!questions[i].open ? (
     <div className='saved_questions'>
       <Typography style={{fontSize:'15px', fontWeight:'400', letterSpacing:'.1px', lineHeight:'24px', paddingBottom:'8px'}}>
         {i+1}.{questions[i].questionText}
       </Typography>

       {ques.options.map((op, j)=>(
         <div key={j}>
                 <div style={{display: 'flex',}}>
                 <FormControlLabel style={{marginLeft:'5px', marginBottom:'5px'}} disabled control={<input type={ques.questionType} 
                 color='primary' style={{marginRight:'3px',}} required={ques.type}/>} label={
                   <Typography style={{fontFamily:'',
                   fontSize:'13px',
                   fontWeight:'400',
                   letterSpacing:'.1px', 
                   lineHeight:'20px',
                   color:'#202124'}}>
                    {ques.options[j].optionText}
                   </Typography>
             }/>
           </div>
         </div>
       ))}
       </div>
   ):""}
 </AccordionSummary>
 {questions[i].open?
 (<div className='question_boxes'>
 {!questions[i].answer?(
   <AccordionDetails className='add_question'>
   <div className='add_question_top'>
     <input type='text' className='question' placeholder='Question' onChange={(e)=>{changeQuestion(e.target.value, i)}} value={ques.questionText}></input>
     <CropOriginalIcon style={{color:'#5f6368'}}/>
     <Select className='select' style={{color:'#5f6368', fontSize:'13px'}}>
       <MenuItem id='text' value='Text' onClick={()=>{addQuestionType(i, "text")}}><SubjectIcon style={{marginRight:'10px'}} />Paragraph</MenuItem>
       <MenuItem id='checkbox' value='Checkbox'  onClick={()=>{addQuestionType(i, "checkbox")}}><CheckBoxIcon style={{marginRight:'10px', color:'#70757a'}} checked/>CheckBoxes</MenuItem>
       <MenuItem id='radio' value='Radio'  onClick={()=>{addQuestionType(i, "radio")}}><Radio style={{marginRight:'10px', color:'#70757a'}} checked/>Multiple Choice</MenuItem>
     </Select>
   </div>
   {ques.options.map((ob, j)=>(
     <div className='add_question_body' key={j}>
       {
         (ques.questionType!=='text')?
         <input type={ques.questionType} style={{marginRight:'10px'}}/> :
         <ShortTextIcon style={{marginRight:'10px'}}/>
       }
       <div>
         <input type='text' className='text_input' placeholder='option' value={ques.options[j].optionText} onChange={(e)=>{changeOptionValue(e.target.value,i, j)}}></input>
       </div>
       <CropOriginalIcon style={{color:'#5f6368'}}/>
       <IconButton aria-label='delete' onClick={()=>{removeOption(i, j)}}>
         <CloseIcon/>
       </IconButton>
     </div>
   ))}

   {ques.options.length<5?(
     <div className='add_question_body'>
       <FormControlLabel disabled control={
         (ques.questionType!="text")?
         <input type={ques.questionType} color='primary' inputProps={{'aria-label':'secondary checkbox'}}
         style={{marginLeft:'10px', marginRight:'10px'}} disabled/>:
         <ShortTextIcon style={{marginRight:'10px'}}/>

       } label={
         <div>
           <input type='text' className='text_input' style={{fontSize:'13px', width:'60px'}} placeholder='Add Other'></input>
           <Button size='small' onClick={()=>{addOption(i)}} style={{textTransform:'none', color:'#4285f4', fontSize:'13px', fontWeight:'600'}}>Add option</Button>
         </div>
       }/>
     </div>
   ) : ""}

   <div className='add_footer'>
     <div className='add_question_bottom_left'>
       <Button size='small' style={{textTransform:'none', color:'#4285f4', fontSize:'13px', fontWeight:'600'}}>
         <FiCornerRightUp style={{border:'2px solid #4285f3', padding:'2px', marginRight:'8px'}}/>Answer Key
       </Button>
     </div>
     <div className='add_question_bottom'>
       <IconButton aria-label='Copy' onClick={()=>{copyQuestion(i)}}>
         <FilterNoneIcon/>
       </IconButton>
       <IconButton aria-label='delete' onClick={()=>{deleteQuestion(i)}}>
         <BsTrash/>
       </IconButton >
       <span style={{color:'#5f6368', fontSize:'13px'}} >Required</span><Switch onClick={()=>{requiredQuestion(i)}} name="CheckedA" color="primary">Checked</Switch>
       <IconButton>
         <MoreVertIcon/>
       </IconButton>
     </div>
   </div>
 </AccordionDetails>

 ):(
  
 ) }

 <div className='question_edit'>
   <AddCircleOutlineIcon onClick={addMoreQuestionField} className='edit'/>
   <OndemandVideoIcon className='edit'/>
   <CropOriginalIcon className='edit'/>
   <TextFieldsIcon className='edit'/>
 </div>
</div>): " "}
 
</Accordion>
</div>



                    </div>
                  </div>
          </div>
        )}
      </Draggable>

      ))}
  return (
    <div className='question_form'>
        <br></br>
        <div className='section'>
            <div className='question_title_section'>
                <div className='question_form_top'>
                    <input type='text' className='question_form_top_name' style={{color:'black'}} placeholder='Untitled Document'></input>
                    <input type='text' className='question_form_top_desc' style={{color:'black'}} placeholder='Form Description'></input>
                </div>
            </div>
            <DragDropContext onDragEnd={onDragEnd}>
              <Droppable droppableId="droppable">
                {(provided, snapshot)=>{
                  <div {...provided.droppableProps}
                  ref={provided.innerRef}>
                    {provided.placeholder}
                  </div>
                }}
              </Droppable>
            </DragDropContext>
            {questionsUI()}
        </div>
    </div>
  )
}

export default QuestionForm
